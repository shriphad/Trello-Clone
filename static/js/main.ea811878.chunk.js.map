{"version":3,"sources":["Components/form.js","Components/AddCard.js","Components/Cards.js","Components/Title.js","Components/Navbar.js","App.js","index.js","Service/storageService.js"],"names":["validateMessages","required","Demo","props","list","addTitle","isCard","Form","useForm","form","formCardDescription","Item","name","label","rules","TextArea","allowClear","onFinish","values","resetFields","add","val","user","Name","obj","Title","cards","some","it","titleExists","message","error","updatedList","style","display","margin","type","htmlType","AddCard","useState","visible","setVisible","addCard","content","ID","uuidv4","title","trigger","onVisibleChange","Cards","card","deleteCard","item","size","marginBottom","hoverable","extra","CloseOutlined","onClick","fontSize","color","padding","Description","data","deleteTitle","styleCards","overflowY","maxHeight","grid","column","dataSource","renderItem","droppableId","provided","ref","innerRef","map","index","draggableId","draggableProps","dragHandleProps","placeholder","marginLeft","Navbar","textAlign","key","App","initialList","getLocalStorage","setList","getTitleIndex","Titles","findIndex","cardExists","value","listIndex","cardDestinationIndex","slice","push","setLocalStorage","success","splice","updatedCards","filter","className","onDragEnd","result","source","destination","TitleSourceIndex","TitleDestinationIndex","temp","swapCards","ReactDOM","render","document","getElementById","module","exports","window","localStorage","setItem","JSON","stringify","state","parse","getItem"],"mappings":"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","file":"static/js/main.ea811878.chunk.js","sourcesContent":["import { Form, Input, Button, message } from \"antd\";\n\nfunction titleExists(list, val) {\n  return list.some(function (it) {\n    return it.Title === val;\n  });\n}\n\nconst validateMessages = {\n  // eslint-disable-next-line no-template-curly-in-string\n  required: \"${label} is required!\",\n};\n\nexport default function Demo(props) {\n  const { list, addTitle, isCard } = props;\n  const [form] = Form.useForm();\n  const styleTitleForm = { display: \"flex\", margin: \"5px\" };\n  const formCardDescription = (\n    <Form.Item\n      name={[\"user\", \"Description\"]}\n      label=\"Description\"\n      rules={[\n        {\n          required: true,\n        },\n      ]}\n    >\n      <Input.TextArea allowClear={true} />\n    </Form.Item>\n  );\n\n  //Preprocess the form data and adds the Title if it's unique\n  const AddTitle = (values) => {\n    const val = values.user.Name;\n    const obj = {\n      Title: val,\n      cards: [],\n    };\n    //If Title already exists, then exit immediately\n    if (titleExists(list, val)) {\n      message.error(`${val} Title already exists`, 1);\n      return;\n    } else {\n      //If its a Unique Title then add.\n      const updatedList = [...list, obj];\n      addTitle(updatedList);\n    }\n    form.resetFields();\n  };\n\n  //Preprocess the form data and adds the Cards if it's unique\n  const AddCard = (values) => {\n    form.resetFields();\n    props.add(values);\n  };\n\n  return (\n    <Form\n      form={form}\n      name=\"nest-messages\"\n      onFinish={isCard ? AddCard : AddTitle}\n      validateMessages={validateMessages}\n    >\n      <div style={isCard ? null : styleTitleForm}>\n        <Form.Item\n          name={[\"user\", \"Name\"]}\n          label=\"Title\"\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Input allowClear={true} />\n        </Form.Item>\n        {isCard ? formCardDescription : null}\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            {isCard ? \"Add Card\" : \"Add Title\"}\n          </Button>\n        </Form.Item>\n      </div>\n    </Form>\n  );\n}\n","import { Popover, Button } from \"antd\";\nimport { useState } from \"react\";\nimport Form from \"./form\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default function AddCard(props) {\n  const [visible, setVisible] = useState(false);\n  const { list, addCard } = props;\n\n  const add = (values) => {\n    const ID = uuidv4();\n    values.user[\"ID\"] = ID;\n    const val = values.user;\n    addCard(list, val);\n    setVisible(false);\n  };\n  return (\n    <Popover\n      content={<Form isCard={true} add={add} />}\n      title=\"Add Card\"\n      trigger=\"click\"\n      visible={visible}\n      onVisibleChange={() => setVisible(!visible)}\n    >\n      <Button type=\"primary\">{visible ? \"Close\" : \"Add Card\"}</Button>\n    </Popover>\n  );\n}\n","import { Card } from \"antd\";\nimport { CloseOutlined } from \"@ant-design/icons\";\n\nexport default function Cards(props) {\n  const { card, deleteCard, item } = props;\n  const styleCloseMark = {\n    fontSize: \"13px\",\n    color: \"red\",\n    padding: \"5px\",\n  };\n\n  return (\n    <Card\n      size=\"small\"\n      title={card.Name}\n      style={{ marginBottom: \"10px\" }}\n      hoverable={true}\n      extra={\n        <CloseOutlined\n          onClick={() => deleteCard(item, card.ID)}\n          style={styleCloseMark}\n        />\n      }\n    >\n      {card.Description}\n    </Card>\n  );\n}\n","import { List, Card } from \"antd\";\nimport { CloseOutlined } from \"@ant-design/icons\";\nimport AddCardForm from \"./AddCard\";\nimport TrelloCards from \"./Cards\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\n\nexport default function Title(props) {\n  const { data, deleteTitle, deleteCard, addCard } = props;\n\n  const styleCards = {\n    overflowY: \"scroll\",\n    maxHeight: \"400px\",\n    marginBottom: \"20px\",\n  };\n\n  return (\n    <List\n      grid={{ column: 4 }}\n      dataSource={data}\n      renderItem={(item) => (\n        <Droppable droppableId={item.Title}>\n          {(provided) => (\n            <div ref={provided.innerRef}>\n              <List.Item>\n                <Card\n                  title={item.Title}\n                  style={{ margin: \"15px\" }}\n                  extra={\n                    <CloseOutlined\n                      style={{ color: \"red\", padding: \"5px\" }}\n                      onClick={() => deleteTitle(item)}\n                    />\n                  }\n                  hoverable={true}\n                >\n                  <div style={styleCards}>\n                    {item.cards.map((card, index) => (\n                      <Draggable\n                        key={card.ID}\n                        draggableId={card.ID}\n                        index={index}\n                      >\n                        {(provided) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <TrelloCards\n                              card={card}\n                              item={item}\n                              key={index}\n                              deleteCard={deleteCard}\n                            />\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                  <AddCardForm\n                    list={item}\n                    style={{ marginLeft: \"50%\" }}\n                    cards={item.cards}\n                    addCard={addCard}\n                  />\n                </Card>\n              </List.Item>\n            </div>\n          )}\n        </Droppable>\n      )}\n    />\n  );\n}\n","export default function Navbar() {\n  return <h1 style={{ textAlign: \"center\" }}>Trello</h1>;\n}\n","import \"antd/dist/antd.css\";\nimport { useState } from \"react\";\nimport Form from \"./Components/form\";\nimport Title from \"./Components/Title\";\nimport Navbar from \"./Components/Navbar\";\nimport { message } from \"antd\";\nimport { setLocalStorage, getLocalStorage } from \"./Service/storageService\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nconst key = \"TRELLO_REACT_APP_ID\";\n\nexport default function App() {\n  const initialList = getLocalStorage(key);\n\n  const [list, setList] = useState(initialList);\n\n  function getTitleIndex(Titles, item) {\n    const val = item.Title ? item.Title : item;\n    return Titles.findIndex((it) => it.Title === val);\n  }\n\n  function getCard(cards, ID) {\n    return cards.filter((it) => it.ID === ID);\n  }\n\n  function swapCards(cards, TitleSourceIndex, TitleDestinationIndex) {\n    const temp = cards[TitleSourceIndex];\n    cards[TitleSourceIndex] = cards[TitleDestinationIndex];\n    cards[TitleDestinationIndex] = temp;\n    return cards;\n  }\n\n  //Finds if the given card exists in the given index of the list\n  function cardExists(list, value, index) {\n    return list[index].cards.some(function (item) {\n      return item.ID === value.ID;\n    });\n  }\n\n  const addTitle = (updatedList) => {\n    setList(updatedList);\n    message.success(`Title has been added successfully`, 1);\n    setLocalStorage(key, updatedList);\n  };\n\n  //To Delete a List\n  const deleteTitle = (value) => {\n    const updatedList = list.filter(function (item) {\n      return item.Title !== value.Title;\n    });\n    setList(updatedList);\n    setLocalStorage(key, updatedList);\n  };\n\n  //Add a Card to the specified list\n  const addCard = (\n    item,\n    card,\n    listIndex = null,\n    cardDestinationIndex = null\n  ) => {\n    let index;\n    if (listIndex === null) index = getTitleIndex(list, item);\n    else index = listIndex;\n\n    if (cardExists(list, card, index)) {\n      message.error(`${card.Name} card already exists`, 1);\n      return false;\n    } else if (listIndex === null) {\n      // inserting at end of the cards\n      let data = list.slice();\n      data[index].cards.push({\n        Name: card.Name,\n        Description: card.Description,\n        ID: card.ID,\n      });\n      setList(data);\n      setLocalStorage(key, data);\n      message.success(`${card.Name} card has successfully been added`, 1);\n      return true;\n    } else {\n      // inserting at specified index of the list\n      let data = list.slice();\n      data[index].cards.splice(cardDestinationIndex, 0, card);\n      setList(data);\n      setLocalStorage(key, data);\n      message.success(`${card.Name} card has successfully been added`, 1);\n      return true;\n    }\n  };\n\n  //Delete a Card from the specified list\n  const deleteCard = (item, value, listIndex = null) => {\n    let index;\n    if (listIndex === null) index = getTitleIndex(list, item);\n    else index = listIndex;\n\n    const updatedCards = list[index].cards.filter(function (item) {\n      return item.ID !== value;\n    });\n\n    let data = [...list];\n    data[index].cards = updatedCards;\n\n    setList(data);\n    setLocalStorage(key, data);\n  };\n\n  const onDragEnd = (result) => {\n    const { source, destination } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      let updatedList = [...list];\n      const index = getTitleIndex(list, destination.droppableId);\n\n      updatedList[index].cards = swapCards(\n        updatedList[index].cards,\n        source.index,\n        destination.index\n      );\n      setList(updatedList);\n      setLocalStorage(key, updatedList);\n    } else {\n      const TitleDestinationIndex = getTitleIndex(\n        list,\n        destination.droppableId\n      );\n      const TitleSourceIndex = getTitleIndex(list, source.droppableId);\n      const card = getCard(list[TitleSourceIndex].cards, result.draggableId);\n\n      const isAdded = addCard(\n        list[TitleDestinationIndex].cards,\n        card[0],\n        TitleDestinationIndex,\n        destination.index\n      );\n      if (isAdded)\n        deleteCard(\n          list[TitleSourceIndex].cards,\n          result.draggableId,\n          TitleSourceIndex\n        );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Form list={list} addTitle={addTitle} isCard={false} />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Title\n          data={list}\n          deleteTitle={deleteTitle}\n          deleteCard={deleteCard}\n          addCard={addCard}\n        />\n      </DragDropContext>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","function setState(key, value) {\n  //Add key also\n  window.localStorage.setItem(key, JSON.stringify(value));\n}\n\nfunction getState(key) {\n  let state = JSON.parse(window.localStorage.getItem(key));\n  //console.log(state.data);\n  return state === null ? [] : state;\n}\n\nmodule.exports = {\n  setLocalStorage: setState,\n  getLocalStorage: getState,\n};\n"],"sourceRoot":""}